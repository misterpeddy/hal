import librosa as rosa
import librosa.display
import matplotlib.pyplot as plt
import numpy as np
import sys
import os

from IPython.display import Audio as IAudio
from IPython.display import display as Idisplay

from demucs import separate as dm_separate

from hal_project.hal import io_utils
from hal_project.hal import analyzers

_FIG_SIZE = (12, 3)

class Track:
  def __init__(self, path, name, autogenerated=True):
    self.path = path
    self.autogenerated = autogenerated
    self.name = name
    self.audio, self.sr = rosa.load(path)

  def show_wave(self):
    plt.figure(figsize=_FIG_SIZE)
    rosa.display.waveshow(self.audio, self.sr, x_axis='s')
    plt.title(self.name)
    plt.tight_layout()
    plt.show()

  def show_chromagram(self):
    ch = analyzers.chromagram(self)
    plt.figure(figsize=_FIG_SIZE)
    rosa.display.specshow(ch, y_axis='chroma', x_axis='s')
    plt.tight_layout()
    plt.show()

  def show_onsets(self):
    onset_env, onset_frames = analyzers.onset(self)
    plt.figure(figsize=_FIG_SIZE)
    plt.plot(times, onset_env, label='onset strength')
    plt.vlines(times[onset_frames], 0, onset_env.max(), color='r', alpha=0.6, label='onsets')
    plt.legend(frameon=True, framealpha=0.75)
    plt.plot()

  def play_audio(self):
    Idisplay(IAudio(data=self.audio, rate=self.sr))


class Audio:

  def __init__(self, filename, autogen_stems=True):
    self.source_file = filename
    self.tracks = {}
    source_name = io_utils.name_from_path(filename)
    self.tracks['source'] = Track(filename, source_name, autogenerated=False)
    self.gen_dir = os.path.join(
      "/home/peddy_google_com/gen_dir/audio",
      io_utils.name_from_path(filename))
    self.gen_dir = io_utils.next_dir(self.gen_dir)

    if autogen_stems:
      self._autogen_stems()

  def _autogen_stems(self):
    model_name = 'demucs_quantized'
    saved_argv = sys.argv
    sys.argv = ['', '-o={}'.format(self.gen_dir)]
    sys.argv += ['-n={}'.format(model_name)]
    sys.argv += [self.source_file]
    try:
      dm_separate.main()
    except:
      sys.argv = saved_argv
      return
    sys.argv = saved_argv
    source_name = io_utils.name_from_path(self.tracks['source'].path)
    stems_path = os.path.join(self.gen_dir, model_name, source_name)
    for f in os.listdir(stems_path):
      name = f.split(".")[0] if "." in f else f
      t = Track(os.path.join(stems_path, f), name)
      self.tracks[name] = t
